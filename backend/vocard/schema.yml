openapi: 3.0.3
info:
  title: Vocard API
  version: 1.0.0
  description: Vocard API Endpoints for SWE3028
paths:
  /ai/eval/:
    post:
      operationId: ai_eval_create
      tags:
      - ai
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /ai/img/:
    post:
      operationId: ai_img_create
      tags:
      - ai
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /auth/kakao/callback/:
    get:
      operationId: auth_kakao_callback_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: auth_kakao_callback_create
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /auth/kakao/login/finish/:
    post:
      operationId: auth_kakao_login_finish_create
      description: |-
        class used for social authentications
        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
        -------------

        example usage for facebook with code

        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
        from allauth.socialaccount.providers.oauth2.client import OAuth2Client

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
            client_class = OAuth2Client
            callback_url = 'localhost:8000'
        -------------
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLogin'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/password/change/:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/user/:
    get:
      operationId: auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /auth/users/:
    get:
      operationId: auth_users_list
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /auth/users/{usr_id}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_update
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /auth/users/remove/{usr_id}/:
    delete:
      operationId: auth_users_remove_destroy
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /examples/:
    get:
      operationId: examples_retrieve
      tags:
      - examples
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: examples_create
      tags:
      - examples
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /examples/{word}/:
    get:
      operationId: examples_retrieve_2
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - examples
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: examples_update
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - examples
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: examples_destroy
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - examples
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /img/:
    get:
      operationId: img_retrieve
      tags:
      - img
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: img_create
      tags:
      - img
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /img/{word}/:
    get:
      operationId: img_retrieve_2
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - img
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: img_update
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - img
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: img_destroy
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - img
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /quiz/{num}/:
    get:
      operationId: quiz_retrieve
      parameters:
      - in: path
        name: num
        schema:
          type: integer
        required: true
      tags:
      - quiz
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: quiz_create
      parameters:
      - in: path
        name: num
        schema:
          type: integer
        required: true
      tags:
      - quiz
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /quiz/{num}/{word}/:
    get:
      operationId: quiz_retrieve_2
      parameters:
      - in: path
        name: num
        schema:
          type: integer
        required: true
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - quiz
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: quiz_update
      parameters:
      - in: path
        name: num
        schema:
          type: integer
        required: true
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - quiz
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: quiz_destroy
      parameters:
      - in: path
        name: num
        schema:
          type: integer
        required: true
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - quiz
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /user-example/{usr_id}/:
    get:
      operationId: user_example_retrieve
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      tags:
      - user-example
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: user_example_create
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      tags:
      - user-example
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /user-example/{usr_id}/{word}/:
    get:
      operationId: user_example_retrieve_2
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - user-example
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: user_example_update
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - user-example
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: user_example_destroy
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - user-example
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /user-stats/{usr_id}/:
    get:
      operationId: user_stats_retrieve
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      tags:
      - user-stats
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: user_stats_create
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      tags:
      - user-stats
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /user-stats/{usr_id}/{word}/:
    get:
      operationId: user_stats_retrieve_2
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - user-stats
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: user_stats_update
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - user-stats
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: user_stats_destroy
      parameters:
      - in: path
        name: usr_id
        schema:
          type: string
        required: true
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - user-stats
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /words/:
    get:
      operationId: words_retrieve
      tags:
      - words
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: words_create
      tags:
      - words
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /words/{word}/:
    get:
      operationId: words_retrieve_2
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - words
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: words_update
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - words
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: words_destroy
      parameters:
      - in: path
        name: word
        schema:
          type: string
        required: true
      tags:
      - words
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedUser:
      type: object
      properties:
        usr_id:
          type: string
          format: uuid
        oauth_id:
          type: string
          maxLength: 255
        nickname:
          type: string
          maxLength: 20
        acc_created:
          type: string
          format: date-time
          readOnly: true
        last_sync:
          type: string
          format: date-time
          readOnly: true
        total_studied:
          type: integer
        latest_studied:
          type: integer
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: string
          format: uuid
          title: Usr id
        oauth_id:
          type: string
          maxLength: 255
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    SocialLogin:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    User:
      type: object
      properties:
        usr_id:
          type: string
          format: uuid
        oauth_id:
          type: string
          maxLength: 255
        nickname:
          type: string
          maxLength: 20
        acc_created:
          type: string
          format: date-time
          readOnly: true
        last_sync:
          type: string
          format: date-time
          readOnly: true
        total_studied:
          type: integer
        latest_studied:
          type: integer
      required:
      - acc_created
      - last_sync
      - nickname
      - oauth_id
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: string
          format: uuid
          title: Usr id
        oauth_id:
          type: string
          maxLength: 255
      required:
      - oauth_id
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
